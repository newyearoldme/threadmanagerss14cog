import discord
from discord.ext import commands
from datetime import datetime

if "cogs" in __name__:
    from .utils.crud import log_thread_closure, get_thread_logs, was_thread_closed, init_db
else:
    from utils.crud import log_thread_closure, get_thread_logs, was_thread_closed, init_db


class PaginatedView(discord.ui.View):
    def __init__(self, embeds: list[discord.Embed]):
        super().__init__()
        self.embeds = embeds
        self.current_page = 0
        self.message: discord.WebhookMessage | None = None
        self.update_buttons()

    def update_buttons(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        self.first_page.disabled = self.current_page == 0
        self.previous_page.disabled = self.current_page == 0
        self.next_page.disabled = self.current_page == len(self.embeds) - 1
        self.last_page.disabled = self.current_page == len(self.embeds) - 1

    async def on_timeout(self):
        """–ü—Ä–µ–∫—Ä–∞—â–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞"""
        for button in self.children:
            button.disabled = True
        try:
            if self.message:
                await self.message.edit(view=self)
        except discord.NotFound:
            pass

    @discord.ui.button(label="‚è™", style=discord.ButtonStyle.secondary)
    async def first_page(self, button: discord.ui.Button, interaction: discord.Interaction):
        self.current_page = 0
        self.update_buttons()
        await self.update_embed(interaction)

    @discord.ui.button(label="‚óÄÔ∏è", style=discord.ButtonStyle.secondary)
    async def previous_page(self, button: discord.ui.Button, interaction: discord.Interaction):
        self.current_page = max(0, self.current_page - 1)
        self.update_buttons()
        await self.update_embed(interaction)

    @discord.ui.button(label="‚ñ∂Ô∏è", style=discord.ButtonStyle.secondary)
    async def next_page(self, button: discord.ui.Button, interaction: discord.Interaction):
        self.current_page = min(len(self.embeds) - 1, self.current_page + 1)
        self.update_buttons()
        await self.update_embed(interaction)

    @discord.ui.button(label="‚è©", style=discord.ButtonStyle.secondary)
    async def last_page(self, button: discord.ui.Button, interaction: discord.Interaction):
        self.current_page = len(self.embeds) - 1
        self.update_buttons()
        await self.update_embed(interaction)

    @discord.ui.button(label="‚ùå", style=discord.ButtonStyle.red)
    async def stop(self, button: discord.ui.Button, interaction: discord.Interaction):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é (—É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ)"""
        if self.message:
            try:
                await self.message.delete()
            except discord.NotFound:
                pass
            self.message = None
        self.clear_items()

    async def update_embed(self, interaction: discord.Interaction):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π Embed –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫"""
        if self.message:
            await interaction.response.edit_message(embed=self.embeds[self.current_page], view=self)

    async def send(self, ctx):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é"""
        self.update_buttons()
        self.message = await ctx.respond(embed=self.embeds[self.current_page], view=self)


class ThreadManagerCog(commands.Cog):
    def __init__(self, client):
        self.client = client
        init_db()

    async def _close_thread(self, ctx: discord.ApplicationContext, expected_channel_name: str):
        if not isinstance(ctx.channel, discord.Thread):
            await ctx.respond("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∂–∞–ª–æ–±–∞—Ö –∏–ª–∏ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è—Ö", ephemeral=True)
            return

        thread = ctx.channel

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –±—ã–ª–∞ –ª–∏ –≤–µ—Ç–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞
        if was_thread_closed(thread.id):
            await ctx.respond("‚ùå –≠—Ç–∞ —Ç–µ–º–∞ —É–∂–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ —Ä–∞–Ω–µ–µ", ephemeral=True)
            return

        parent_channel = thread.parent
        if not parent_channel or parent_channel.name.lower() != expected_channel_name.lower():
            await ctx.respond(f"‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {expected_channel_name}", ephemeral=True)
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –≤–µ—Ç–∫–∏
        log_thread_closure(
            user_id=ctx.author.id,
            thread_id=thread.id,
            channel_id=parent_channel.id,
        )

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–µ—Ç–∫—É
        self.close_mapping = {
            "üìë‚îá–∂–∞–ª–æ–±—ã": {
                "noun": "–ñ–∞–ª–æ–±–∞",
                "verb": "–∑–∞–∫—Ä—ã—Ç–∞"
            },
            "üìë‚îá–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è": {
                "noun": "–û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ",
                "verb": "–∑–∞–∫—Ä—ã—Ç–æ"
            }
        }

        mapping_entry = self.close_mapping.get(expected_channel_name.lower(), {"noun": "–í–µ—Ç–∫–∞", "verb": "–∑–∞–∫—Ä—ã—Ç–∞"})
        noun_text = mapping_entry["noun"]
        verb_text = mapping_entry["verb"]

        await ctx.respond(f"‚úÖ {noun_text} {thread.name} —É—Å–ø–µ—à–Ω–æ {verb_text}")
        await thread.edit(archived=True, locked=True)

    @commands.slash_command(name="close_complaint", description="–ó–∞–∫—Ä—ã—Ç—å –∂–∞–ª–æ–±—É")
    async def close_complaint(self, ctx: discord.ApplicationContext):
        """–ó–∞–∫—Ä—ã—Ç—å –≤–µ—Ç–∫—É –≤ –∂–∞–ª–æ–±–∞—Ö"""
        await self._close_thread(ctx, "üìë‚îá–∂–∞–ª–æ–±—ã")

    @commands.slash_command(name="close_appeal", description="–ó–∞–∫—Ä—ã—Ç—å –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ")
    async def close_appeal(self, ctx: discord.ApplicationContext):
        """–ó–∞–∫—Ä—ã—Ç—å –≤–µ—Ç–∫—É –≤ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è—Ö"""
        await self._close_thread(ctx, "üìë‚îá–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è")

    @commands.slash_command(name="complaints_stats", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º –∂–∞–ª–æ–±–∞–º –∏–ª–∏ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è–º")
    async def complaints_stats(
        self,
        ctx: discord.ApplicationContext,
        user: discord.Member,
        channel: str = discord.Option(
            description="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª",
            choices=["üìë‚îá–∂–∞–ª–æ–±—ã", "üìë‚îá–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è"],
        ),
        start_date: str = discord.Option(
            description="–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-01-01), —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å utc",
            default=None,
        ),
        end_date: str = discord.Option(
            description="–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-01-31), —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å utc",
            default=None,
        )
    ):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–∞–Ω–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
        allowed_channels = ["üìë‚îá–∂–∞–ª–æ–±—ã", "üìë‚îá–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è"]
        if channel not in allowed_channels:
            await ctx.respond(f"‚ùå –ö–∞–Ω–∞–ª '{channel}' –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑: {', '.join(allowed_channels)}.", ephemeral=True)
            return

        # –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞ –ø–æ –∏–º–µ–Ω–∏
        guild_channel = discord.utils.get(ctx.guild.channels, name=channel)
        if not guild_channel or not isinstance(guild_channel, discord.ForumChannel):
            await ctx.respond(f"‚ùå –ö–∞–Ω–∞–ª '{channel}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–Ω—ã–º.", ephemeral=True)
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –¥–∞—Ç –≤ datetime (–µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã)
        try:
            start_date_obj = datetime.strptime(start_date, "%Y-%m-%d") if start_date else None
            end_date_obj = datetime.strptime(end_date, "%Y-%m-%d") if end_date else None
        except ValueError:
            await ctx.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD.", ephemeral=True)
            return

        if start_date_obj and end_date_obj and end_date_obj < start_date_obj:
            await ctx.respond(
                f"‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ ({end_date_obj.strftime('%Y-%m-%d')}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã ({start_date_obj.strftime('%Y-%m-%d')}).",
                ephemeral=True,
            )
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ CRUD
        logs = get_thread_logs(user_id=user.id, channel_id=guild_channel.id)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º
        if start_date_obj:
            logs = [log for log in logs if log.closed_at >= start_date_obj]
        if end_date_obj:
            logs = [log for log in logs if log.closed_at <= end_date_obj]

        mapping = {
            "–∂–∞–ª–æ–±—ã": "–∂–∞–ª–æ–±",
            "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è": "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–π"
        }
        normalized_channel = channel.split("‚îá")[-1].strip().lower()
        channel_type = mapping.get(normalized_channel)

        if not logs:
            await ctx.respond(
                f"–£ {user.mention} –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö {channel_type} –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
                ephemeral=True,
            )
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ embed –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        embeds = []
        for i in range(0, len(logs), 5):
            log_page = logs[i:i + 5]

            embed = discord.Embed(
                title = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö {channel_type} –¥–ª—è {user.display_name}",
                color=discord.Color.blue(),
            )

            for log_item in log_page:
                thread_url = f"https://discord.com/channels/{ctx.guild.id}/{log_item.thread_id}"
                embed.add_field(
                    name=f"–¢–µ–º–∞: {thread_url}",
                    value=f"–ó–∞–∫—Ä—ã—Ç–∞: {log_item.closed_at.strftime('%Y-%m-%d %H:%M')}",
                    inline=False,
                )
            embed.set_footer(text=f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(logs)}")
            embeds.append(embed)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ PaginatedView
        view = PaginatedView(embeds)
        await view.send(ctx)


def setup(client):
    client.add_cog(ThreadManagerCog(client))
